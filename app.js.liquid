class ModalDialog extends HTMLElement {
  constructor() {
    super();

    // Attach Shadow DOM
    this.attachShadow({ mode: 'open' });

    // Shadow DOM HTML content
    this.shadowRoot.innerHTML = `
        <style>
          dialog::backdrop {
            background: black;
            opacity: 0.5;
          }
          dialog {
            min-width: 30vw;
            max-width: 90vw;
            border: 1px solid black;
            padding: 40px;
            border-radius: 15px;
            position: relative;
            text-align: center;
          }
          button {
            border-radius: 2px;
            background-color: white;
            border: 1px solid black;
            margin: 5px;
            padding: 5px 10px;
            box-shadow: 1px 1px 2px grey;
            cursor: pointer;
          }
          #close {
            border: none;
            border-radius: 2px;
            font-size: 16px;
            cursor: pointer;
            position: absolute;
            top: 5px;
            right: 5px;
            z-index: 1000;
          }
          #close:hover {
            background-color: grey;
          }
          #closea {
            border: none;
            border-radius: 2px;
            font-size: 16px;
            cursor: pointer;
            position: absolute;
            top: 5px;
            right: 5px;
            z-index: 1000;
          }
          #closea:hover {
            background-color: grey;
          }
        </style>
        <dialog>
          <div id="auto_select" hidden>
            <div>
              <img id="country_icon" src="" alt="Opis obrazu" />
              <div>Your location is set to: <strong><span id="location"></span></strong></div> 
              <div>Currency: <strong><span id="currency"></span></strong></div>
              <div>Get shipping options for <span id="shipping_location"></span></div>
              <div>
                <button id="continue">Continue</button>
              </div>
              <div>
                <button id="change">Change country/region</button>
              </div>
              <div>
                <button id="close">x</button>
              </div>
            </div>
          </div>

          <div id="select_country" hidden>
            <slot name="content">Change country/region:</slot>
            <div id="button-container">
              <!-- Select menu will be added dynamically -->
            </div>
            <div>
              <button id="closea">x</button>
            </div>
          </div>
        </dialog>
      `;
  }

  async getCountryData() {
    try {
      const response = await fetch(
        window.Shopify.routes.root
        + 'browsing_context_suggestions.json'
        + '?country[enabled]=true'
        + `&country[exclude]=${window.Shopify.country}`
        + '&language[enabled]=true'
        + `&language[exclude]=${window.Shopify.language}`
      );

      const data = await response.json();
      const countryData = data.detected_values.country;
      return countryData;
    } catch (error) {
      console.error('Error fetching country data:', error);
      return {
        handle: "PL",
        name: "Poland"
      };
    }
  }

  async connectedCallback() {
    const shadowRoot = this.shadowRoot;
    const buttonContainer = shadowRoot.querySelector('#button-container');
    let countryButtons = document.querySelectorAll('.subdomain-btn');
    var currency = shadowRoot.querySelector('#currency');

    const select = document.createElement('select');
    select.id = 'country-select';

    countryButtons.forEach(button => {
      const option = document.createElement('option');
      option.value = button.dataset.url;
      const currency = button.dataset.currency ? `(${button.dataset.currency})` : '';
      option.textContent = `${button.dataset.country} ${currency}`;
      select.appendChild(option);
    });

    buttonContainer.appendChild(select);

    select.addEventListener('change', (event) => {
      const selectedUrl = event.target.value;
      const selectedCountry = event.target.options[event.target.selectedIndex].text;

      if (selectedUrl) {

        const timestamp = new Date().getTime();
        const data = {
          location: selectedCountry,
          url: selectedUrl,
          timestamp: timestamp,
        };

        console.log(`Country selected: ${selectedCountry}, storing data:`, data);
        localStorage.setItem('userCountryChoice', JSON.stringify(data));

        window.location.href = 'https://' + selectedUrl;  // Redirect to the selected country's URL
      }
    });

    const dialog = this.shadowRoot.querySelector('dialog');
    const closeButton = this.shadowRoot.querySelector('#close');
    const closeaButton = this.shadowRoot.querySelector('#closea');
    const changeButton = this.shadowRoot.querySelector('#change');
    const continueButton = this.shadowRoot.querySelector('#continue');
    var selectCountry = shadowRoot.querySelector('#select_country');
    var autoSelect = shadowRoot.querySelector('#auto_select');

    const countryData = await this.getCountryData();
    let filteredButtons = Array.from(countryButtons).filter(button => button.dataset.country === countryData.name);
    var currentCurrency = filteredButtons[0].getAttribute('data-currency');
    currency.textContent = currentCurrency;

    selectCountry.hidden = countryData;
    if (countryData) {
      var location = shadowRoot.querySelector('#location');
      var shipping_location = shadowRoot.querySelector('#shipping_location');

      var countryIsoCodeHandle = countryData.handle.toLowerCase();
      var countryName = countryData.name;
      location.textContent = countryName;
      shipping_location.textContent = countryName;
      autoSelect.hidden = false;
      selectCountry.hidden = true;
      var baseAssetUrl = "{{ 'file_name' | asset_url }}"; 
      baseAssetUrl = baseAssetUrl.substring(0, baseAssetUrl.lastIndexOf('/')) + "/";
      var svgUrl = baseAssetUrl + countryIsoCodeHandle + ".svg";
      var countryIcon = this.shadowRoot.querySelector('#country_icon');
      countryIcon.src = svgUrl;
    } else {
      console.log('No country data available.');
    }

    const EXPIRY_HOURS = 24;
    const isValidStorage = () => {
      const storedData = JSON.parse(localStorage.getItem('userCountryChoice'));
      if (!storedData) return false;

      const { timestamp } = storedData;
      const now = new Date().getTime();
      const expiryTime = EXPIRY_HOURS * 60 * 60 * 1000;

      return now - timestamp < expiryTime;
    };

    const storedData = JSON.parse(localStorage.getItem('userCountryChoice'));

    if (isValidStorage()) {
      console.log(`Valid choice found: ${storedData.location}. Redirecting...`);
      console.log(`URL: ${storedData.url}`);
      //alert("localStorage var: userCountryChoice already set.  Redirecting...");
      window.location.href = 'https://' + storedData.url;
      return;
    } else {
      console.log('No valid choice found or choice has expired. Showing the modal.');
      dialog.showModal();
      document.body.classList.add('blur');
    }

    changeButton.addEventListener('click', () => {
      selectCountry.hidden = false;
      autoSelect.hidden = true;
    });

    continueButton.addEventListener('click', () => {
      let filteredButtons = Array.from(countryButtons).filter(button => button.dataset.country === countryData.name);
      const subdomain = filteredButtons[0].getAttribute('data-subdomain');
      console.log('WybÃ³r subdomeny:', subdomain);

      const url = subdomain.split(":")[1];
      window.location.href = 'https://' + url;  // Redirect to the selected country's URL
    });

    closeButton.addEventListener('click', () => {
      console.log('Popup closed without making a selection.');
      dialog.close();
      document.body.classList.remove('blur');
    });

    closeaButton.addEventListener('click', () => {
      console.log('Popup closed without making a selection.');
      dialog.close();
      document.body.classList.remove('blur');
    });

    const openBtn = document.querySelector(`[open-modal="${this.id}"]`);
    if (openBtn) {
      openBtn.addEventListener('click', () => {
        console.log('Opening the modal dialog from Learn More button.');
        dialog.showModal();
        document.body.classList.add('blur');
      });
    }
  }
}

customElements.define('modal-dialog', ModalDialog);
